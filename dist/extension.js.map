{"version":3,"file":"extension.js","mappings":"swBACA,kBAIA,oBAAyBA,GAGvBC,QAAQC,IAAI,iCAGZ,IAAIC,EAAyBC,EAAOC,SAASC,gBAAgB,wBAAwBC,UACnF,IACE,MAAMC,QAAkBJ,EAAOK,OAAOC,aAAa,CACjDC,OAAQ,gCACRC,YAAa,wBAGf,IAAKJ,EACH,OAKFJ,EAAOK,OAAOI,uBAAuB,oCAAoCL,I,CACzE,MAAOM,GACPV,EAAOK,OAAOM,iBAAiB,4BAA4BD,aAAiBE,MAAQF,EAAMG,QAAUC,OAAOJ,K,KAK3GK,EAAuBf,EAAOC,SAASC,gBAAgB,sBAAsBC,UAC/E,IAGEH,EAAOK,OAAOI,uBAAuB,kB,CACrC,MAAOC,GACPV,EAAOK,OAAOM,iBAAiB,6BAA6BD,aAAiBE,MAAQF,EAAMG,QAAUC,OAAOJ,K,KAK5GM,EAAoBhB,EAAOC,SAASC,gBAAgB,mBAAmBC,UACzE,IAGEH,EAAOK,OAAOI,uBAAuB,gB,CACrC,MAAOC,GACPV,EAAOK,OAAOM,iBAAiB,0BAA0BD,aAAiBE,MAAQF,EAAMG,QAAUC,OAAOJ,K,KAK7Gd,EAAQqB,cAAcC,KAAKnB,GAC3BH,EAAQqB,cAAcC,KAAKH,GAC3BnB,EAAQqB,cAAcC,KAAKF,EAC7B,EAGA,wBAEEnB,QAAQC,IAAI,qCACd,C,UC9DAqB,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":[".././src/extension.ts","../external commonjs \"vscode\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  \n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  console.log('IPSA extension is now active!');\n\n  // Register the startNewSession command\n  let startNewSessionCommand = vscode.commands.registerCommand('ipsa.startNewSession', async () => {\n    try {\n      const problemId = await vscode.window.showInputBox({\n        prompt: 'Enter a name for this problem',\n        placeHolder: 'e.g., auth-flow-bug'\n      });\n      \n      if (!problemId) {\n        return; // User cancelled the input\n      }\n      \n      // TODO: Implement session creation logic\n      \n      vscode.window.showInformationMessage(`Started new session for problem: ${problemId}`);\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to start session: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  });\n\n  // Register the resumeSession command\n  let resumeSessionCommand = vscode.commands.registerCommand('ipsa.resumeSession', async () => {\n    try {\n      // TODO: Implement session resumption logic\n      \n      vscode.window.showInformationMessage('Session resumed');\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to resume session: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  });\n\n  // Register the endSession command\n  let endSessionCommand = vscode.commands.registerCommand('ipsa.endSession', async () => {\n    try {\n      // TODO: Implement session end logic\n      \n      vscode.window.showInformationMessage('Session ended');\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to end session: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  });\n\n  // Add all commands to the subscriptions array\n  context.subscriptions.push(startNewSessionCommand);\n  context.subscriptions.push(resumeSessionCommand);\n  context.subscriptions.push(endSessionCommand);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {\n  // Clean up resources\n  console.log('IPSA extension is now deactivated!');\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","startNewSessionCommand","vscode","commands","registerCommand","async","problemId","window","showInputBox","prompt","placeHolder","showInformationMessage","error","showErrorMessage","Error","message","String","resumeSessionCommand","endSessionCommand","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}